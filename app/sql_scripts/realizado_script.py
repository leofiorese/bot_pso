# rel_script.py

import logging

def script_sql(dateadd_value):
    
    return f"""
SELECT
    a.APON_ID,
    a.USU_ID,
    u.ATIVO,
    u.EMAIL,
    u.NOME AS NOME_USUARIO,
    a.ATIV_ID,
    a.DT_INICIO AS DT_INICIO_APONTAMENTO,
    a.PROJ_ID,
    th.VALOR AS TX_COLABORADOR,
    pa.NOME AS NOME_ATIVIDADE,
    pa.B_DT_FIM AS B_DT_FIM_ATIVIDADE,
    pa.B_DT_INICIO AS B_DT_INICIO_ATIVIDADE,
    pa.DT_FIM AS DT_FIM_ATIVIDADE,
    pa.DT_INICIO AS DT_INICIO_ATIVIDADE,
    CAST(pa.DURACAO_PREVISTA / 60 AS DECIMAL(10,2)) AS DURACAO_PREVISTA_HORAS,
    CAST(pa.TRABALHO_APONTADO / 60.0 AS DECIMAL(10,2)) AS TRABALHO_APONTADO_ATIVIDADE,
    CAST(pa.TRABALHO_FALTANDO / 60.0 AS DECIMAL(10,2)) AS TRABALHO_FALTANDO_ATIVIDADE,
    CAST(pa.TRABALHO_PREVISTO / 60.0 AS DECIMAL(10,2)) AS TRABALHO_PREVISTO_ATIVIDADE,
    p.CODIGO AS CODIGO_PROJETO,
    p.DT_FIM AS DT_FIM_PROJETO,
    p.DT_INICIO AS DT_INICIO_PROJETO,
    p.NOME AS NOME_PROJETO,
    p.VALOR AS VALOR_PROJETO,
    CAST(a.MINUTOS / 60.0 AS DECIMAL(10,2)) AS HORAS,
    CAST((a.MINUTOS / 60.0) * th.VALOR AS DECIMAL(10, 2)) AS CUSTO_APONT
FROM
    PSO_USUARIOS u
JOIN
    PSO_APONTAMENTOS a ON u.USU_ID = a.USU_ID
JOIN
    PSO_TAXA_HISTORICO th ON u.TAXA_ID_CUS = th.TAXA_ID
JOIN
    PSO_PROJ_ATIVIDADES pa ON a.ATIV_ID = pa.ATIV_ID
JOIN
    PSO_PROJETOS p ON a.PROJ_ID = p.PROJ_ID
WHERE
    a.STATUS = 2
    AND a.DT_INICIO BETWEEN DATEADD(day, {dateadd_value}, GETDATE()) AND GETDATE()
    AND th.DT_EFETIVA = (
        SELECT MAX(th2.DT_EFETIVA)
        FROM PSO_TAXA_HISTORICO th2
        WHERE th2.TAXA_ID = u.TAXA_ID_CUS
          AND th2.DT_EFETIVA <= a.DT_INICIO
    );
"""

def gerar_script_final(dateadd_string):
    logging.info(f"rel_script.py: Recebido dateadd_string = '{dateadd_string}', gerando a query.")
    script_completo = script_sql(dateadd_string)

    return script_completo